@model TestApplication1.Models.author2
<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>author2</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Author_id)

    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, "--Select Province--", new { htmlAttributes = new { @class = "form-control" } })
            @*@Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })*@
        </div>
    </div>


    ____________________________________________________________

    @*<div class="form-group">
            @Html.LabelFor(model => model.Compare1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Compare1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Compare1, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
                @Html.LabelFor(model => model.Compare2, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Compare2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Compare2, "", new { @class = "text-danger" })
                </div>
            </div>*@

    @for (var i = 0; i < Model.book2.Count; i++)
    {

        @Html.EditorFor(Model => Model.book2[i].Publisher, new { htmlAttributes = new { @class = "form-control" } })

        @Html.EditorFor(Model => Model.book2[i].Title, new { htmlAttributes = new { @class = "form-control" } })

    }
    @*@Html.Editor("author2.book2[0].Publisher", "xx", new { htmlAttributes = new { @class = "form-control" } })*@
    @*@Html.EditorFor(author2 => author2.book2[0].Publisher, new { htmlAttributes = new { @class = "form-control" } })*@

    @*<input type="text" value="@Model.book2[0].Publisher" name="author2.book2[0].Publisher" />*@


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
    @Html.DropDownList("Author_id", (SelectList)ViewBag.Author_id, new { @class = "form-control", @disabled = "disabled" })

    @Html.DropDownList("Author_id", null, "Content", new { @class = "form-control", @disabled = "disabled" })
    @*@Html.DropDownList("Author_id", null, string.Empty, new { @class = "form-control", @disabled = true })*@





</div>
}
<button data-on="ON" data-off="OFF" data-id="@Model.Author_id" class="switch-label">111</button>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>


@section scripts{
    <script>
     $(document).ready(function () {

         $('.switch-label').click(function () {

             var Id = $('.switch-label').attr('data-id');
            var checkStatus = this.checked ? 'ON' : 'OFF


            $.ajax({
                type: "POST",
                url: '@Url.Action("UpdateNtf", "author2")',
                data: {
                    id: 13,
                    status: checkStatus
                },
                dataType: 'json',
                success: function (result) {
                    alert(result);
                    //if (result) {

                    //    result.NTFOnOFF = checkStatus

                    //    console.log("Ok");
                    //} else {

                    //    console.log("error");
                    //}

                },
                error: function () {
                    console.log('something went wrong - debug it!');
                }
            })

        });




         jQuery.validator.addMethod('CantbothExistValidator', function (value, element, params) {
             var currentDate = new Date();
             if (Date.parse(value) > currentDate) {
                 return false;
             }
             return true;
         }, '');

         jQuery.validator.unobtrusive.adapters.add('CantbothExistValidator', function (options) {
             options.rules['CantbothExistValidator'] = {};
             options.messages['CantbothExistValidator'] = options.message;
         });

    });
    </script>
}